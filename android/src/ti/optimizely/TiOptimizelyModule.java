/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.optimizely;

import android.app.Activity;

import com.optimizely.ab.OptimizelyUserContext;
import com.optimizely.ab.android.sdk.OptimizelyClient;
import com.optimizely.ab.android.sdk.OptimizelyManager;
import com.optimizely.ab.config.parser.JsonParseException;
import com.optimizely.ab.optimizelydecision.OptimizelyDecision;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.net.URL;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;


@Kroll.module(name = "TiOptimizely", id = "ti.optimizely")
public class TiOptimizelyModule extends KrollModule {

    // Standard Debugging variables
    private static final String LCAT = "TiOptimizelyModule";
    private final TimerTask task = new DatafilePoller();
    OptimizelyManager optimizelyManager;
    String SDK_KEY = "Your_SDK_Key";

    // You can define constants with @Kroll.constant, for example:
    // @Kroll.constant public static final String EXTERNAL_NAME = value;

    public TiOptimizelyModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
    }

    @Override
    public void onDestroy(Activity activity) {
        super.onDestroy(activity);
        task.cancel();
    }

    // Methods
    @Kroll.method
    public void initialize(String key) {
        SDK_KEY = key;
        optimizelyManager = OptimizelyManager.builder()
                .withSDKKey(SDK_KEY)
                .build(TiApplication.getAppCurrentActivity());
    }

    @Kroll.method
    public void test() {
        Timer timer = new Timer();
        long intevalPeriod = 1000;
        timer.scheduleAtFixedRate(task, 0, intevalPeriod);
    }

    private void runQuickStart(String datafile) {
        // Initialize optimizelyClient
        OptimizelyClient optimizelyClient = optimizelyManager.initialize(TiApplication.getAppCurrentActivity(), datafile);
        if (optimizelyClient.isValid()) {
            /* --------------------------------
             * to get rapid demo results, generate random users. Each user always sees the same variation unless you reconfigure the flag rule.
             * --------------------------------
             */
            Random rnd = new Random();

            boolean hasOnFlags = false;

            for (int i = 0; i < 10; i++) {
                String userId = (rnd.nextInt(9999 - 1000) + 1000) + "";
          /* --------------------------------
             Create hardcoded user & bucket user into a flag variation
             --------------------------------
          */
                OptimizelyUserContext user = optimizelyClient.createUserContext(userId);
                // "product_sort" corresponds to a flag key in your Optimizely project
                OptimizelyDecision decision = user.decide("product_sort");
                // did decision fail with a critical error?
                if (decision.getVariationKey() == null) {
                    Log.e(LCAT, "\n\ndecision error: " + decision.getReasons());
                }
                // get a dynamic configuration variable
                // "sort_method" corresponds to a variable key in your Optimizely project
                String sortMethod = null;
                try {
                    sortMethod = decision.getVariables().getValue("sort_method", String.class);
                } catch (JsonParseException e) {
                    e.printStackTrace();
                }

                if (decision.getEnabled()) {
                    // Keep count how many visitors had the flag enabled
                    hasOnFlags = true;
                }
                  /* --------------------------------
                   Mock what the users sees with print statements (in production, use flag variables to implement feature configuration)
                   --------------------------------
                */
                // always returns false until you enable a flag rule in your Optimizely project
                Log.i(LCAT, "\n\nFlag " + (decision.getEnabled() ? "on" : "off") + ". User number " + user.getUserId() + " saw flag variation: " + decision.getVariationKey() + " and got products sorted by: " + sortMethod + " config variable as part of flag rule: " + decision.getRuleKey());

            }

            if (!hasOnFlags) {
                Log.i(LCAT, "\n\nFlag was off for everyone. Some reasons could include:" +
                        "\n1. Your sample size of visitors was too small. Rerun, or increase the iterations in the FOR loop" +
                        "\n2. By default you have 2 keys for 2 project environments (dev/prod). Verify in Settings>Environments that you used the right key for the environment where your flag is toggled to ON." +
                        "\nCheck your key at  https://app.optimizely.com/v2/projects/" + optimizelyClient.getProjectConfig().getProjectId() + "settings/implementation");
            }
        } else {
            Log.i(LCAT, "Optimizely client invalid. Verify in Settings>Environments that you used the primary environment's SDK key");
        }
    }

    public class DatafilePoller extends TimerTask {
        static final String DATAFILE_URL = "https://cdn.optimizely.com/datafiles/%s.json";
        private String currentDatafile = "";

        @Override
        public void run() {
            try {
                BufferedInputStream in = new BufferedInputStream(new URL(String.format(DATAFILE_URL, SDK_KEY)).openStream());
                byte[] contents = new byte[1024];

                int bytesRead;
                String latestDatafile = "";
                while ((bytesRead = in.read(contents)) != -1) {
                    latestDatafile += new String(contents, 0, bytesRead);
                }
                if (!currentDatafile.equals(latestDatafile)) {
                    currentDatafile = latestDatafile;
                    runQuickStart(currentDatafile);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

}

